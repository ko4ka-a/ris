# ris
A - Added / S = Staged, файл с такой меткой добавлен в индекс и будте включен в следующий коммит
M - Modified, файл, который уже был зафиксирован в репозитории ранее(включен хотя бы в 1 предыдущий коммит), но был изменен


## Управление файлами, которые будут добавлены в репозитории и/или помечены для добавления 

Это делается при помощи фпйла '.gitignore'

Любые папки, расширения файлов, конкретные имена файлов, перечисленные в файле '.gitignore', полностью пропадат из поля зрения репозитория

'git add - all' / 'git add *' - подготовить все файлы для включения в коммит
- 'git reset filename/dirname' - исключить файл/папку из кммита (изменения не будут добавлены в историю репозитория)
- 'git commit -m "описание коммита"' - зафиксировать подготовленные файлы в репозитории (<<закоммитить>>)
- 'git diff filename' - посмотреть разницу между текущей версией файлы и версией, зафиксированной в последнем коммите. Более сложные случаи(например, сравниение двух коммитов) см. в документации 'git helf diff'
-'git log --pretty=format="%h %s" -- graph' - наглядно отформотированная история с визуализацией дерева репозитория 
- 'git blame filename' - выдает все строки файла с указанием коммитов и их авторов
- 'git branch new_branch source_branch' - создать новую ветку с именем 'new_branch' на основе указанной ветки с именем 'source_branch'.
- 'git switch branch_name' - переключиться на указанную ветку с именем 'branch_name' (она должна существовать)
- 'git checkout -b new_branch' - создать и сразу переключиться а новую ветку с именем 'new_branch'
- 'git merge branch-name' - слияние двух веток. По умоланию указывается имя той ветки, **которую** мы будем присоединять к **текущей**

> Например, git merge dev при нахождениии на ветке master присоединит ветку dev к ветке master
 


## Начальная настройка git
- git confir --global user.email "you@exapmle.com" - для настройки электронной почты
-git config --global user.name "Ваше имя" - для настройки имени

Использование команды без флага "--global" настраивает параметры **только в текущем** репозитории (что удобно, если у вас несколько адресов и/или юзернеймов) 

## Области в репозитории
1. Рабочая директория 
2. Область подготовленных файлов (индексом) - то, что пойдет в фиксацию при кооммите, содержание будущего коммита
3. HEAD - последний коммит в репозитории, от него рассчитываются другие характеристики состояния коммита(нового). При отктае до какого-либ коммита в истории HEAD перемещается на этот коммит. Для нескольких векток репозитория также существуют свои HEADы.

## Ветки

Ветка (branch) - серия последовательно связанных коммитов.

git поддерживает существование в репозитории нескольких веток одновременно. При двух и более ветках хотя бы у 2-х из них должен быть общий источник - коммит, общий для обеих веток.

Активной в одно и то же время может быть только одна ветка. При переключении веток в рабочей директории заменяетс снимок файловой системы, что сожет привести к потере незафиксированных изменений.
